<?php
namespace AppBundle\Controller;

use AppBundle\Entity\user;

use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TelType;
use Symfony\Component\HttpFoundation\File;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class SignUpController extends Controller
{
  private function generateUniqueFileName()
  {
    // md5() reduces the similarity of the file names generated by
    // uniqid(), which is based on timestamps
    return md5(uniqid());
  }
	/**
     * @Route("/signup", name="inscription")
     */

	public function sign_upAction(){
		return $this->render('signup.html.twig');
	}
    /**
     * @Route("/signup_user", name="signup_user")
     */
    public function signup_userAction(Request $request,UserPasswordEncoderInterface $passwordEncoder)
    {
    	$user = new user();
    	$user->setType('utilisateur');
      $user->setAdress(NULL);
    	$form = $this->createFormBuilder($user)
      ->add('email',EmailType::class)  
    	->add('username',TextType::class,['label' => 'Login '])
      ->add('name',TextType::class,['label' => 'Nom   '])
    	->add('plainPassword', RepeatedType::class, [
                'type' => PasswordType::class,
                'first_options' => ['label' => 'Mot de passe '],
                'second_options' => ['label' => 'Confirmer le mot de passe '],
        ])
      ->add('avatar', FileType::class)
    	->add('tel',TelType::class, ['label'=>'TÃ©l '])   
    	->add('S\'inscrire', SubmitType::class)
      ->getForm();
       	$form->handleRequest($request);
       	if ($form->isSubmitted() && $form->isValid()){ 
            $password = $passwordEncoder->encodePassword($user, $user->getPlainPassword());
            $user->setPassword($password);                     
				    $file = $user->getAvatar();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            try
            {
              $file->move($this->getParameter('images_directory'),
                          $filename);
            }catch(FileException $e)
            {

            }
            $user->setAvatar($filename);
            $em = $this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();
         		return $this->redirectToRoute('login');
        }
        return $this->render('signup_user.html.twig',array('form' => $form->createView()));
    }
     /**
     * @Route("/signup_resto", name="signup_resto")
     */
    public function signup_restoAction(Request $request,UserPasswordEncoderInterface $passwordEncoder)
    {
    	$user = new user();
    	$user->setType('restaurant');
    	$form = $this->createFormBuilder($user)
      ->add('email',EmailType::class)  
      ->add('username',TextType::class,['label' => 'Login'])
      ->add('name',TextType::class,['label' => 'Nom'])
      ->add('plainPassword', RepeatedType::class, [
                'type' => PasswordType::class,
                'first_options' => ['label' => 'Mot de passe '],
                'second_options' => ['label' => 'Confirmer le mot de passe '],
        ])
      ->add('avatar', FileType::class)
      ->add('tel',TelType::class) 
      ->add('adress',TextType::class,['label' => 'Ville'])   
      ->add('S\'inscrire', SubmitType::class)
      ->getForm();
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()){
            $password = $passwordEncoder->encodePassword($user, $user->getPlainPassword());
            $user->setPassword($password);                      
            $file = $user->getAvatar();
            $filename = $this->generateUniqueFileName().'.'.$file->guessExtension();
            try
            {
              $file->move($this->getParameter('images_directory'),
                          $filename);
            }catch(FileException $e)
            {

            }
            $user->setAvatar($filename);
            $em = $this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('login');
        }    	
        return $this->render('signup_user.html.twig',array('form' => $form->createView()));
    }
}